import*as e from"@tanstack/react-query";const t=e,u=!!t.useSuspenseQuery,r={enabled:!0,suspense:!0,placeholderData:void 0,useErrorBoundary:(e,t)=>void 0===t.state.data},n=(e,r,n)=>function(s,a){const[i,y]=[t.useQueryClient(u?a:s).getDefaultOptions()[n],r,s].reduce((([e,t],{use:u=[],...r}={})=>[[...e,...u],{...t,...r}]),[[]]);return i.reduceRight(((e,t)=>t(e)),e)(y,a)},s=(e,t)=>void 0===t?e:[...e,t],a=(e,t,u)=>{const r=(t,u)=>({queryFn:e=>t(u,e),queryKey:s(e.queryKey,u)});return Object.assign(n(((e,n)=>t({...e,...r(e.fetcher,e.variables),...u},n)),e,"queries"),{fetcher:e.fetcher,getKey:t=>s(e.queryKey,t),getOptions:t=>({...e,...r(e.fetcher,t)}),getFetchOptions:t=>({...r(e.fetcher,t),queryKeyHashFn:e.queryKeyHashFn,getPreviousPageParam:e.getPreviousPageParam,getNextPageParam:e.getNextPageParam,initialPageParam:e.initialPageParam})})},i=e=>a(e,t.useQuery),y=e=>u?a(e,t.useSuspenseQuery):a(e,t.useQuery,r),o=e=>a(e,t.useInfiniteQuery),c=e=>u?a(e,t.useSuspenseInfiniteQuery):a(e,t.useInfiniteQuery,r),g=e=>Object.assign(n(t.useMutation,e,"mutations"),{getKey:()=>e.mutationKey,getOptions:()=>e,mutationFn:e.mutationFn}),p=(e,t)=>Object.entries(t).reduce(((t,[u,r])=>{if(r._type){const n={...r,["m"===r._type?"mutationKey":"queryKey"]:[...e,u]};t[u]="m"===r._type?{useMutation:g(n),...g(n)}:"q"===r._type?{useQuery:i(n),useSuspenseQuery:y(n),...i(n)}:{useInfiniteQuery:o(n),useSuspenseInfiniteQuery:c(n),...o(n)}}else t[u]=p([...e,u],r);return t}),{getKey:()=>e}),m=(e,t)=>p(Array.isArray(e)?e:[e],t);m.query=e=>({...e,_type:"q"}),m.infiniteQuery=e=>({...e,_type:"inf"}),m.mutation=e=>({...e,_type:"m"});export{o as createInfiniteQuery,g as createMutation,i as createQuery,c as createSuspenseInfiniteQuery,y as createSuspenseQuery,s as getKey,m as router};
