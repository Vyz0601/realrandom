{"version":3,"file":"index.production.js","sources":["../../src/utils.ts","../../src/createBaseQuery.ts","../../src/createQuery.ts","../../src/createSuspenseQuery.ts","../../src/createInfiniteQuery.ts","../../src/createSuspenseInfiniteQuery.ts","../../src/createMutation.ts","../../src/router.ts"],"sourcesContent":["import * as TanstackReactQuery from '@tanstack/react-query'\nimport type { Query, QueryClient, QueryKey } from '@tanstack/react-query'\n\nimport type { Middleware } from './types'\n\nexport const ReactQuery = TanstackReactQuery\n\nexport const isV5 = !!ReactQuery.useSuspenseQuery\n\nexport const suspenseOptions = {\n  enabled: true,\n  suspense: true,\n  placeholderData: undefined,\n  useErrorBoundary: (_error: unknown, query: Query) =>\n    query.state.data === undefined,\n}\n\nexport const withMiddleware = (\n  hook: any,\n  defaultOptions: any,\n  type: 'queries' | 'mutations'\n) => {\n  return function useMiddleware(\n    options?: { client?: QueryClient; use?: Middleware[] },\n    queryClient?: QueryClient\n  ) {\n    const [uses, opts]: [Middleware[], any] = [\n      ReactQuery.useQueryClient(\n        // @ts-ignore Compatible with ReactQuery v4\n        isV5 ? queryClient : options\n      ).getDefaultOptions()[type],\n      defaultOptions,\n      options,\n    ].reduce(\n      ([u1, o1], { use: u2 = [], ...o2 } = {}) => [\n        [...u1, ...u2],\n        { ...o1, ...o2 },\n      ],\n      [[]]\n    )\n\n    return uses.reduceRight((next, use) => use(next), hook)(opts, queryClient)\n  }\n}\n\nexport const getKey = (queryKey: QueryKey, variables?: any): QueryKey => {\n  return variables === undefined ? queryKey : [...queryKey, variables]\n}\n","import type {\n  QueryClient,\n  QueryFunctionContext,\n  UseBaseQueryOptions,\n  UseInfiniteQueryOptions,\n} from '@tanstack/react-query'\n\nimport { getKey as getFullKey, withMiddleware } from './utils'\n\ntype QueryBaseHookOptions = Omit<\n  UseBaseQueryOptions,\n  'queryKey' | 'queryFn'\n> & {\n  fetcher?: any\n  variables?: any\n}\n\nexport const createBaseQuery = (\n  defaultOptions: any,\n  useRQHook: (options: any, queryClient?: any) => any,\n  overrideOptions?: Partial<UseInfiniteQueryOptions>\n): any => {\n  if (process.env.NODE_ENV !== 'production') {\n    // @ts-ignore\n    if (defaultOptions.useDefaultOptions) {\n      console.error(\n        '[Bug] useDefaultOptions is not supported, please use middleware instead.'\n      )\n    }\n\n    // @ts-ignore\n    if (defaultOptions.queryFn) {\n      console.error(\n        '[Bug] queryFn is not supported, please use fetcher instead.'\n      )\n    }\n  }\n\n  const getQueryOptions = (fetcherFn: any, variables: any) => {\n    return {\n      queryFn: (context: QueryFunctionContext) => fetcherFn(variables, context),\n      queryKey: getFullKey(defaultOptions.queryKey, variables),\n    }\n  }\n\n  const getKey = (variables?: any) =>\n    getFullKey(defaultOptions.queryKey, variables)\n\n  const getOptions = (variables: any) => {\n    return {\n      ...defaultOptions,\n      ...getQueryOptions(defaultOptions.fetcher, variables),\n    }\n  }\n\n  const getFetchOptions = (variables: any) => {\n    return {\n      ...getQueryOptions(defaultOptions.fetcher, variables),\n      queryKeyHashFn: defaultOptions.queryKeyHashFn,\n      getPreviousPageParam: defaultOptions.getPreviousPageParam,\n      getNextPageParam: defaultOptions.getNextPageParam,\n      initialPageParam: defaultOptions.initialPageParam,\n    }\n  }\n\n  const useBaseHook = (\n    options: QueryBaseHookOptions,\n    queryClient?: QueryClient\n  ) => {\n    return useRQHook(\n      {\n        ...options,\n        ...getQueryOptions(options.fetcher, options.variables),\n        ...overrideOptions,\n      },\n      queryClient\n    )\n  }\n\n  return Object.assign(withMiddleware(useBaseHook, defaultOptions, 'queries'), {\n    fetcher: defaultOptions.fetcher,\n    getKey,\n    getOptions,\n    getFetchOptions,\n  })\n}\n","import { createBaseQuery } from './createBaseQuery'\nimport type { CompatibleError, CreateQueryOptions, QueryHook } from './types'\nimport { ReactQuery } from './utils'\n\nexport const createQuery = <\n  TFnData,\n  TVariables = void,\n  TError = CompatibleError\n>(\n  options: CreateQueryOptions<TFnData, TVariables, TError>\n): QueryHook<TFnData, TVariables, TError> => {\n  return createBaseQuery(options, ReactQuery.useQuery)\n}\n","import { createBaseQuery } from './createBaseQuery'\nimport type {\n  CompatibleError,\n  CreateSuspenseQueryOptions,\n  SuspenseQueryHook,\n} from './types'\nimport { ReactQuery, isV5, suspenseOptions } from './utils'\n\nexport const createSuspenseQuery = <\n  TFnData,\n  TVariables = void,\n  TError = CompatibleError\n>(\n  options: CreateSuspenseQueryOptions<TFnData, TVariables, TError>\n): SuspenseQueryHook<TFnData, TVariables, TError> => {\n  return isV5\n    ? createBaseQuery(options, ReactQuery.useSuspenseQuery)\n    : createBaseQuery(options, ReactQuery.useQuery, suspenseOptions)\n}\n","import { createBaseQuery } from './createBaseQuery'\nimport type {\n  CompatibleError,\n  CreateInfiniteQueryOptions,\n  InfiniteQueryHook,\n} from './types'\nimport { ReactQuery } from './utils'\n\nexport const createInfiniteQuery = <\n  TFnData,\n  TVariables = void,\n  TError = CompatibleError,\n  TPageParam = number\n>(\n  options: CreateInfiniteQueryOptions<TFnData, TVariables, TError, TPageParam>\n): InfiniteQueryHook<TFnData, TVariables, TError, TPageParam> => {\n  return createBaseQuery(options, ReactQuery.useInfiniteQuery)\n}\n","import { createBaseQuery } from './createBaseQuery'\nimport type {\n  CompatibleError,\n  CreateSuspenseInfiniteQueryOptions,\n  SuspenseInfiniteQueryHook,\n} from './types'\nimport { ReactQuery, isV5, suspenseOptions } from './utils'\n\nexport const createSuspenseInfiniteQuery = <\n  TFnData,\n  TVariables = void,\n  TError = CompatibleError,\n  TPageParam = number\n>(\n  options: CreateSuspenseInfiniteQueryOptions<\n    TFnData,\n    TVariables,\n    TError,\n    TPageParam\n  >\n): SuspenseInfiniteQueryHook<TFnData, TVariables, TError, TPageParam> => {\n  return isV5\n    ? createBaseQuery(options, ReactQuery.useSuspenseInfiniteQuery)\n    : createBaseQuery(options, ReactQuery.useInfiniteQuery, suspenseOptions)\n}\n","import type {\n  CompatibleError,\n  CreateMutationOptions,\n  MutationHook,\n} from './types'\nimport { ReactQuery, withMiddleware } from './utils'\n\nexport const createMutation = <\n  TData = unknown,\n  TVariables = void,\n  TError = CompatibleError,\n  TContext = unknown\n>(\n  defaultOptions: CreateMutationOptions<TData, TVariables, TError, TContext>\n): MutationHook<TData, TVariables, TError, TContext> => {\n  return Object.assign(\n    withMiddleware(ReactQuery.useMutation, defaultOptions, 'mutations'),\n    {\n      getKey: () => defaultOptions.mutationKey,\n      getOptions: () => defaultOptions,\n      mutationFn: defaultOptions.mutationFn,\n    }\n  ) as MutationHook<TData, TVariables, TError, TContext>\n}\n","import { QueryKey } from '@tanstack/react-query'\n\nimport { createInfiniteQuery } from './createInfiniteQuery'\nimport { createMutation } from './createMutation'\nimport { createQuery } from './createQuery'\nimport { createSuspenseInfiniteQuery } from './createSuspenseInfiniteQuery'\nimport { createSuspenseQuery } from './createSuspenseQuery'\nimport type {\n  CompatibleError,\n  CreateRouter,\n  RouterConfig,\n  RouterInfiniteQuery,\n  RouterInfiniteQueryOptions,\n  RouterMutation,\n  RouterMutationOptions,\n  RouterQuery,\n  RouterQueryOptions,\n} from './types'\n\nconst buildRouter = (keys: QueryKey, config: RouterConfig) => {\n  return Object.entries(config).reduce(\n    (acc, [key, opts]) => {\n      if (!opts._type) {\n        acc[key] = buildRouter([...keys, key], opts)\n      } else {\n        const options: any = {\n          ...opts,\n          [opts._type === `m` ? `mutationKey` : `queryKey`]: [...keys, key],\n        }\n\n        acc[key] =\n          opts._type === `m`\n            ? {\n                useMutation: createMutation(options),\n                ...createMutation(options),\n              }\n            : opts._type === `q`\n            ? {\n                useQuery: createQuery(options),\n                useSuspenseQuery: createSuspenseQuery(options),\n                ...createQuery(options),\n              }\n            : {\n                useInfiniteQuery: createInfiniteQuery(options),\n                useSuspenseInfiniteQuery: createSuspenseInfiniteQuery(options),\n                ...createInfiniteQuery(options),\n              }\n      }\n\n      return acc\n    },\n    {\n      getKey: () => keys,\n    } as any\n  )\n}\n\nexport const router = <TConfig extends RouterConfig>(\n  key: string | QueryKey,\n  config: TConfig\n): CreateRouter<TConfig> => {\n  return buildRouter(Array.isArray(key) ? key : [key], config)\n}\n\nrouter.query = <TFnData, TVariables = void, TError = CompatibleError>(\n  options: RouterQueryOptions<TFnData, TVariables, TError>\n) => {\n  return {\n    ...options,\n    _type: 'q',\n  } as RouterQuery<TFnData, TVariables, TError>\n}\n\nrouter.infiniteQuery = <\n  TFnData,\n  TVariables = void,\n  TError = CompatibleError,\n  TPageParam = number\n>(\n  options: RouterInfiniteQueryOptions<TFnData, TVariables, TError, TPageParam>\n) => {\n  return { ...options, _type: 'inf' } as RouterInfiniteQuery<\n    TFnData,\n    TVariables,\n    TError,\n    TPageParam\n  >\n}\n\nrouter.mutation = <\n  TFnData = unknown,\n  TVariables = void,\n  TError = CompatibleError,\n  TContext = unknown\n>(\n  options: RouterMutationOptions<TFnData, TVariables, TError, TContext>\n) => {\n  return { ...options, _type: 'm' } as RouterMutation<\n    TFnData,\n    TVariables,\n    TError,\n    TContext\n  >\n}\n"],"names":["ReactQuery","isV5","useSuspenseQuery","suspenseOptions","enabled","suspense","placeholderData","undefined","useErrorBoundary","_error","query","state","data","withMiddleware","hook","defaultOptions","type","options","queryClient","uses","opts","useQueryClient","getDefaultOptions","reduce","u1","o1","use","u2","o2","reduceRight","next","getKey","queryKey","variables","createBaseQuery","useRQHook","overrideOptions","getQueryOptions","fetcherFn","queryFn","context","getFullKey","Object","assign","fetcher","getOptions","getFetchOptions","queryKeyHashFn","getPreviousPageParam","getNextPageParam","initialPageParam","createQuery","useQuery","createSuspenseQuery","createInfiniteQuery","useInfiniteQuery","createSuspenseInfiniteQuery","useSuspenseInfiniteQuery","createMutation","useMutation","mutationKey","mutationFn","buildRouter","keys","config","entries","acc","key","_type","router","Array","isArray","infiniteQuery","mutation"],"mappings":"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"}